(define (rpsls human_throw)
  (let ((comp_throw (comp)))
    (cond ((not (member? human_throw 
                '(rock paper scissors lizard spock)))
           '(That was not a valid input .... play fair!))
          ((equal? human_throw comp_throw) '(You Tied ... meh))
          ((and (equal? human_throw 'paper)
                (or (equal? comp_throw 'rock)
                    (equal? comp_throw 'spock)))
           (se '(You won! ....) human_throw 'beat comp_throw))
          ((and (equal? human_throw 'rock)
                (or (equal? comp_throw 'scissors)
                    (equal? comp_throw 'lizard)))
           (se '(You won! ....) human_throw 'beat comp_throw))
          ((and (equal? human_throw 'scissors)
                (or (equal? comp_throw 'paper)
                    (equal? comp_throw 'lizard)))
           (se '(You won! ....) human_throw 'beat comp_throw))
          ((and (equal? human_throw 'lizard)
                (or (equal? comp_throw 'spock)
                    (equal? comp_throw 'paper)))
           (se '(You won! ....) human_throw 'beat comp_throw))
         ((and (equal? human_throw 'spock)
                (or (equal? comp_throw 'scissors)
                    (equal? comp_throw 'rock)))
           (se '(You won! ....) human_throw 'beat comp_throw))
          (else (se '(You lost...) human_throw 
                    '(loses to) comp_throw)))))
(define (comp) 
    (let ((guess (random 5)))
      (cond ((equal? guess 0) 'rock)
            ((equal? guess 1) 'paper)
            ((equal? guess 2) 'scissors)
            ((equal? guess 3) 'lizard)
            ((equal? guess 4) 'spock)
            (else 'noooooo))))